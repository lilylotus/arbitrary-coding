<?xml version="1.0" encoding="UTF-8"?>
<!-- 设置 log4j2 的自身 log 级别为 WARN -->
<!-- 日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!-- Configuration 后面的 status，设置 log4j2 自身内部的信息输出，可以不设置，trace 时会看到 log4j2 内部各种详细输出 -->
<!-- monitorInterval: Log4j 能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->
<configuration status="ERROR" monitorInterval="60">

    <!--变量配置-->
    <Properties>
        <!-- [%date]日期，[%thread] 线程名，[%-5level] 级别从左显示5个字符宽度，%msg 日志消息，-->
        <!-- %n 换行符，%logger{36} 表示 Logger 名字最长36个字符 -->
        <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] %logger{36} - %msg%xEx%n" />
        <Property name="APP_PROFILE" value="${sys:profileName:-default}"/>
        <Property name="APP_NAME" value="${sys:appName:-default}"/>
        <!-- 定义日志存储的路径 /${ctx:spring.application.name} -->
        <property name="BASE_DIR" value="logger" />
    </Properties>

    <!--先定义所有的appender-->
    <appenders>
        <!-- 控制台输出配置 -->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <!-- 只输出 level 及其以上级别的信息（onMatch），其它直接拒绝（onMismatch）-->
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
        </console>

        <!-- 打印出 >= DEBUG 级别的信息，每次大小超过 size，则这 size 大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingFile name="RollingFileAll" fileName="${BASE_DIR}/rolling-file-all.log"
                     filePattern="${BASE_DIR}/$${date:yyyyMMdd}/rolling-file-all-%d{yyyyMMddHH}-%i.log.gz">
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Filters>
                <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <Policies>
                <!-- interval, integer 型，指定两次封存动作之间的时间间隔 -->
                <!-- 需要和 filePattern 结合使用，日期格式精确到哪一位，interval 也精确到哪一个单位 -->
                <!-- %d{yyyy-MM-dd HH-mm-ss}-%i，最小的时间粒度是 ss，即秒钟 -->
                <!-- modulate, boolean型，说明是否对封存时间进行调制 -->
                <!-- modulate=true， 则封存时间将以 0 点为边界进行偏移计算。如: modulate=true，interval=4hours，
                    那么假设上次封存日志的时间为03:00，则下次封存日志的时间为 04:00， 之后的封存时间依次为 08:00，12:00，16:00 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="50 MB"/>
            </Policies>
            <!--<CronTriggeringPolicy schedule="0 0/1 * * * ?"/>-->
            <!-- Seconds(0-59) Minutes(0-59) Hours(0-23) Day-of-mouth(1-31) Mount(1-11) Day-of-week(1-7) Year(Optional) -->
            <!--<CronTriggeringPolicy schedule="0/10 * * * * ?"/>-->
            <!-- DefaultRolloverStrategy 属性如不设置，则默认为最多同一文件夹下 7 个文件开始覆盖 -->
            <DefaultRolloverStrategy max="3">
                <!-- testMode=true，实际的文件不会被删除，打印删除日志 -->
                <Delete basePath="${BASE_DIR}/$${date:yyyyMMdd}" maxDepth="2">
                    <!-- IfFileName: 匹配文件名称 -->
                    <!-- glob: 匹配2级目录深度下的以 .log.gz 结尾的备份文件 -->
                    <IfFileName glob="rolling-file-all*.gz" />
                    <!-- IfLastModified: 匹配文件修改时间，精度要和日期滚动最小精度一致 -->
                    <!--age: 匹配超过 180 天的文件，单位d、h、m、s分别表示天、小时、分钟、秒-->
                    <IfLastModified age="3d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

    </appenders>

    <!-- Logger 节点用来单独指定日志的形式，比如要为指定包下的 class 指定不同的日志级别等 -->
    <!-- 定义 logger，只有定义了 logger 并引入 appender，appender 才会生效-->
    <Loggers>
        <Root level="ALL">
            <appender-ref ref="Console"/>
            <AppenderRef ref="RollingFileAll"/>
        </Root>
    </Loggers>
</configuration>
